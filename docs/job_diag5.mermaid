sequenceDiagram
  participant requestor
  participant poster as poster / routing
  %% participant o as orchestrator e.g. kubernetes
  participant gostint
  participant queues
  participant vault as vault
  participant docker

  %% Enrolement
  gostint->>vault: Enroles its RSA Public key

  %% build job to submit
  requestor->>vault: (authenticates with)
  requestor->>vault: request wrapped SecretID for AppRole(gostint)
  vault-->>requestor: wrapped SecretID (token)

  requestor->>vault: request e2e&#xb9; encryption of job payload (inc wrapped SecretID)

  requestor->>vault: request a default token ttl=10m use-limit=2
  vault-->>requestor: a default token
  requestor->>vault: place encrypted job payload in the default token's cubbyhole

  %% request job to be posted/routing
  requestor->>poster: (authenticates with)
  requestor->>poster: POST job qname+default token+cubbyhole path

  %% This time, even if the poster is hacked and intercepts the POST request,
  %% and using the default token to retrieve the cubbyhole, the data returned
  %% is encrypted, such that only gostint's RSA Private Key can decrypt it.
  %% This tampering of the request can be detected to raise an alert of the
  %% MITM attack.

  poster->>gostint: (authenticates with)
  poster->>gostint: fwd POST job request

  %% extract job from cubbyhole
  gostint->>vault: retrieve cubbyhole from path using default token (last use)
  vault-->>gostint: job request from cubbyhole

  %% we can decrypt here or at point of job execution, in this example we will
  %% leave the payload encrypted until it is needed for the job to run.

  gostint->>queues: Queues the (still encrypted) job request
  gostint-->>poster: job queued response
  poster-->>requestor: job queued response

  gostint-->>gostint: sometime later

  queues->>gostint: job is popped from the queue

  % Decrypt
  gostint->>gostint: decrypt payload with RSA private key

  gostint->>vault: unwrap wrapped SecretID (from payload)
  vault-->>gostint: SecretID
  gostint->>vault: authenticate with RoleID+SecretID
  vault-->>gostint: token (with appropriate policies for automation)
  %% this token is used by gostint going fwd and passed to running job
  gostint->>vault: retrieve secrets at refs&#xb2; from job request
  vault-->>gostint: secrets

  gostint->>docker: run job request with injected secrets...
  docker-->>gostint: return results
  gostint->>queues: save results
  gostint->>vault: revoke approle token (drop job privs)

  requestor->>poster: poll for results
  poster->>gostint: poll for results
  gostint->> queues: retrieve results
  queues-->>gostint: results
  gostint-->>poster: results&#xb3;
  poster-->>requestor: results

  requestor-->>requestor: loop polls until success/failed/notauthorised/unknown
